using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Services;
using System.Web.Script.Services;
using HospitalBLL.Entities;

/// <summary>
/// Summary description for GenerarTurnos
/// </summary>
[WebService(Namespace = "http://tempuri.org/")]
[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
// To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. 
// [System.Web.Script.Services.ScriptService]
[ScriptService]
public class GenerarTurnos : System.Web.Services.WebService {

    public GenerarTurnos () {

        //Uncomment the following line if using designed components 
        //InitializeComponent(); 
    }

    [WebMethod]
    public string Guardar_Dias_Atencion(int medicoId, int EspecialidadId, string FechaDesde, string FechaHasta, string HoraInicio, string HoraFin, string Duracion, int ConsultorioId, int Tipo)
    {
        int cantidadDeTurnosGenerados = 0;
        int cantidadDeTurnosEliminados = 0;
        //Rango
        if (Tipo == 1)
        {

            if (FechaDesde == "") { throw new Exception("Revise las fechas"); }
            if (FechaHasta == "") { throw new Exception("Revise las fechas"); }

            DateTime? DiaYHoraInicio = Convert.ToDateTime(FechaDesde);
            DateTime? DiaYHoraFin = Convert.ToDateTime(FechaHasta).AddHours(23).AddMinutes(59).AddMilliseconds(99);
                       

            try
            {
                Hospital.GenerarTurnosBLL gt = new Hospital.GenerarTurnosBLL();
                cantidadDeTurnosGenerados = gt.GenerateTurnosByRange(medicoId, EspecialidadId, DiaYHoraInicio.Value, DiaYHoraFin.Value);
                cantidadDeTurnosEliminados = gt.QuitarTurnosFeriados(medicoId, EspecialidadId);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        if (Tipo == 2)
        {
            DateTime FechaP = DateTime.Now;
            if (FechaDesde == "" || !DateTime.TryParse(FechaDesde, out FechaP)) { throw new Exception("Revise la fecha"); }
            if (HoraInicio == "" || !DateTime.TryParse("01/01/2013 " + HoraInicio, out FechaP)) { throw new Exception("Revise la hora inicial"); }
            if (HoraFin == "" || !DateTime.TryParse("01/01/2013 " + HoraFin, out FechaP)) { throw new Exception("Revise la hora final"); }
            
            DateTime? Fecha = Convert.ToDateTime(FechaDesde);
            Time DiaYHoraInicio = Convert.ToDateTime(HoraInicio);
            Time DiaYHoraFin = Convert.ToDateTime(HoraFin);
            int duracion = Convert.ToInt32(Duracion);

            DateTime fechaInicio = Fecha.Value.AddHours(DiaYHoraInicio.Hour).AddMinutes(DiaYHoraInicio.Minutes);
            DateTime fechaFin = Fecha.Value.AddHours(DiaYHoraFin.Hour).AddMinutes(DiaYHoraFin.Minutes);

            try
            {
                int dur = Convert.ToInt32(Duracion);
                Hospital.GenerarTurnosBLL gt = new Hospital.GenerarTurnosBLL();
				Hospital.TurnosBLL T = new Hospital.TurnosBLL();

                Hospital.TurnosBLL t = new Hospital.TurnosBLL();
                bool AtiendeMedico = false;
                AtiendeMedico = t.Atiende_El_Dia(medicoId, EspecialidadId, fechaInicio);
                if (AtiendeMedico)
                {
                    throw new Exception("El Médico no atiende ese día");
                }
				
                cantidadDeTurnosGenerados = gt.GenerateTurnosByDay(medicoId, EspecialidadId, fechaInicio, fechaFin, dur, ConsultorioId);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }

            try
            {
                Hospital.GenerarTurnosBLL gt = new Hospital.GenerarTurnosBLL();
                cantidadDeTurnosEliminados = gt.QuitarTurnosFeriados(medicoId, EspecialidadId);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        
           return string.Format("Se generaron {0} turnos", Convert.ToInt32(cantidadDeTurnosGenerados) - Convert.ToInt32(cantidadDeTurnosEliminados));


        
    }
    
}
